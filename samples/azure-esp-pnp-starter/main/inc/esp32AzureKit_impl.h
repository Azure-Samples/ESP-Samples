/************************************************************************************************
 * This code was automatically generated by Digital Twin Code Generator tool 0.6.3.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 *
 * Generated Date: Thursday, November 7, 2019
 ***********************************************************************************************/

#ifndef ESP32AZUREKIT_IMPL
#define ESP32AZUREKIT_IMPL

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#include "azure_c_shared_utility/xlogging.h"
#include "azure_c_shared_utility/threadapi.h"
#include "parson.h"

/**
* Type definition
*/

/**
* @brief Result of DigitalTwin command execution.
*/
typedef enum DIGITALTWIN_COMMAND_RESULT_TAG
{
    DIGITALTWIN_COMMAND_OK,
    DIGITALTWIN_COMMAND_TIMEOUT,
    DIGITALTWIN_COMMAND_ERROR
} DIGITALTWIN_COMMAND_RESULT;

typedef struct ESP32AZUREKIT_ECHO_echocommandrequest_TAG
{
    char* displayedValue;

} ESP32AZUREKIT_ECHO_echocommandrequest;

/**
* Device telemetries related methods.
*/

void Update_Sensor_Data();

long Esp32AzureKit_Telemetry_ReadPitch();

long Esp32AzureKit_Telemetry_ReadRoll();

double Esp32AzureKit_Telemetry_ReadPressure();

double Esp32AzureKit_Telemetry_ReadAltitude();

long Esp32AzureKit_Telemetry_ReadMagnetX();

long Esp32AzureKit_Telemetry_ReadMagnetY();

long Esp32AzureKit_Telemetry_ReadMagnetZ();

double Esp32AzureKit_Telemetry_ReadTemp();

double Esp32AzureKit_Telemetry_ReadHumid();

double Esp32AzureKit_Telemetry_ReadLight();

long Esp32AzureKit_Telemetry_ReadMinFreeHeap();

/**
* Device properties related methods.
*/

bool Esp32AzureKit_Property_FanSpeedCallback(double fanSpeed);

bool Esp32AzureKit_Property_TempThresholdCallback(double tempThreshold);

char* Urn_azureiot_DeviceManagement_DeviceInformation_Property_GetManufacturer();

char* Urn_azureiot_DeviceManagement_DeviceInformation_Property_GetModel();

char* Urn_azureiot_DeviceManagement_DeviceInformation_Property_GetSwVersion();

char* Urn_azureiot_DeviceManagement_DeviceInformation_Property_GetOsName();

char* Urn_azureiot_DeviceManagement_DeviceInformation_Property_GetProcessorArchitecture();

char* Urn_azureiot_DeviceManagement_DeviceInformation_Property_GetProcessorManufacturer();

long Urn_azureiot_DeviceManagement_DeviceInformation_Property_GetTotalStorage();

long Urn_azureiot_DeviceManagement_DeviceInformation_Property_GetTotalMemory();

/**
* Device commands related methods.
*/

DIGITALTWIN_COMMAND_RESULT Esp32AzureKit_Command_Echo(ESP32AZUREKIT_ECHO_echocommandrequest *echocommandrequest, char** response, unsigned int* statusCode);

DIGITALTWIN_COMMAND_RESULT Esp32AzureKit_Command_StartFan(unsigned int* statusCode);

DIGITALTWIN_COMMAND_RESULT Esp32AzureKit_Command_StopFan(unsigned int* statusCode);

// Callbacks to handle the confirmation result of sending telemetry
void SendTelemetry_Succeeded_Callback(const char* interfaceName, const char* telemetryName);
void SendTelemetry_Error_Callback(const char* interfaceName, const char* telemetryName);

// Callbacks to handle the confirmation result of reporting property
void ReportProperty_Succeeded_Callback(const char* interfaceName, const char* propertyName);
void ReportProperty_Error_Callback(const char* interfaceName, const char* propertyName);

#ifdef __cplusplus
}
#endif

#endif // ESP32AZUREKIT_IMPL
